openapi: 3.0.3
info:
  title: Архитектура как код - OpenAPI 3.0
  description: |-
   Курс "Архитектура микросервисов", API проекта "Архитектура как код"
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://arch.homework
tags:
  - name: Архитектура как код
    description: API микросервисов
  - name: project
    description: Микросервис, работы с проектом
  - name: user
    description: Микросервис, работы с пользователями
  - name: notification
    description: Микросервис, работы с уведомлениями
paths:
  /api/project/create:
    post:
      tags:
        - project
      summary: Создать проект
      description: Создание нового проекта пользоователем
      operationId: createProject
      requestBody:
        description: ДТО проекта, включая манифест
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                default: project_pending
                enum:
                  - project_pending
                  - project_created
                  - project_updated
                  - manifest_created
                  - manifest_updated
        '400':
          description: Invalid input
  /api/project/status:
    get:
      tags:
        - project
      summary: Получить статус по id проекта
      description: .
      operationId: getStatusProjectById
      parameters:
        - name: projectId
          in: query
          description: Идентификатор проекта
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Invalid status value
  /api/notification/{userId}/get:
    get:
      tags:
        - notification
      summary: Получить уведомления пользователя
      description: Возвращает все уведомления пользователя, соответствующие фильтру
      operationId: getUserNotification
      parameters:
        - name: userId
          in: path
          description: 'Идентификатор пользователя'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /api/notification/{userId}:
    post:
      tags:
        - notification
      summary: создать уведомление для пользователя
      description: создать новое уведомление для пользователя
      operationId: createNotification
      parameters:
        - name: userId
          in: path
          description: 'Идентификатор пользователя'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: Invalid input
  /user/{login}:
    get:
      tags:
        - user
      summary: Получить данные пользователя по логину
      description: ''
      operationId: getUserByLogin
      parameters:
        - name: login
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        note:
          type: string
          example: John
        noteDate:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    Project:
      required:
        - name
        - version
      type: object
      properties:
        name:
          type: string
          example: otus-architect
        description:
          type: string
          example: Проект курса ОТУС по теме "Арихитектура как код"
        author:
          type: string
          example: Ovchinnikov A.V.
        version:
          type: string
          example: v1.0.0
        manifestInfo:
          $ref: '#/components/schemas/ManifestData'
    ManifestData:
      description: Модель данных манифеста
      type: object
      properties:
        version:
          type: string
        projectId:
          type: string
        fileId:
          type: string
        components:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ArchComponent'
    ArchComponent:
      description: Модель данных компонента архитектуры
      properties:
        links:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ArchOperation'
        type:
          type: string
        description:
          type: string
        dockerImage:
          type: string
        technologies:
          type: array
          items:
            type: string
    ArchOperation:
      description: Модель данных операций компонента
      type: object
      properties:
          id:
            type: string
          type:
            type: string
          direction:
            type: string
          method:
            type: string
          uri:
            type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
        application/xml:
          schema:
            $ref: '#/components/schemas/Project'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'